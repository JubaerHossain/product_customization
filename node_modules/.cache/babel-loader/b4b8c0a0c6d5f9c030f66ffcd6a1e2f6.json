{"ast":null,"code":"import _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/customizer-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\nvar _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/customizer-app/src/canvas/components/ChairMesh.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { useLoader } from \"react-three-fiber\";\nimport { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar INITIAL_MTL = new THREE.MeshPhongMaterial({\n  color: new THREE.Color(0xf1f1f1),\n  shininess: 10\n});\nvar INITIAL_MAP = [{\n  childID: \"back\",\n  mtl: INITIAL_MTL\n}, {\n  childID: \"base\",\n  mtl: INITIAL_MTL\n}, {\n  childID: \"cushions\",\n  mtl: INITIAL_MTL\n}, {\n  childID: \"legs\",\n  mtl: INITIAL_MTL\n}, {\n  childID: \"supports\",\n  mtl: INITIAL_MTL\n}];\n\nvar initColor = function initColor(parent, type, mtl) {\n  parent.traverse(function (o) {\n    if (o.isMesh && o.name.includes(type)) {\n      o.castShadow = true;\n      o.receiveShadow = true;\n      o.material = mtl;\n      o.nameID = type;\n    }\n  });\n};\n\nvar ChairMesh = function ChairMesh(_ref) {\n  _s();\n\n  var newMaterialOpt = _ref.newMaterialOpt;\n\n  var _useLoader = useLoader(GLTFLoader, \"chair.gltf\"),\n      theModel = _useLoader.scene;\n\n  var chair = useRef(theModel);\n  useEffect(function () {\n    return void setMaterial(newMaterialOpt.activeOption, newMaterialOpt.newMTL);\n  }, [newMaterialOpt.newMTL]);\n  useEffect(function () {\n    if (theModel) {\n      var _iterator = _createForOfIteratorHelper(INITIAL_MAP),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var object = _step.value;\n          initColor(theModel, object.childID, object.mtl);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, [theModel]);\n\n  var setMaterial = function setMaterial(type, mtl) {\n    theModel.traverse(function (o) {\n      if (o.isMesh && o.nameID != null) {\n        if (o.nameID === type) {\n          o.material = mtl;\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    ref: chair,\n    object: theModel,\n    scale: [2, 2, 2],\n    rotation: [0, Math.PI, 0],\n    position: [0, -1, 0],\n    receiveShadow: true,\n    castShadow: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, _this);\n};\n\n_s(ChairMesh, \"Cxt8m/+zLPgQqc/IbWmBU8e1/eo=\", false, function () {\n  return [useLoader];\n});\n\n_c = ChairMesh;\nexport default ChairMesh;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChairMesh\");","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/customizer-app/src/canvas/components/ChairMesh.jsx"],"names":["React","THREE","GLTFLoader","useLoader","useRef","useEffect","INITIAL_MTL","MeshPhongMaterial","color","Color","shininess","INITIAL_MAP","childID","mtl","initColor","parent","type","traverse","o","isMesh","name","includes","castShadow","receiveShadow","material","nameID","ChairMesh","newMaterialOpt","theModel","scene","chair","setMaterial","activeOption","newMTL","object","Math","PI"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as THREE from \"three\";\r\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport {useLoader} from \"react-three-fiber\";\r\nimport {useRef, useEffect} from \"react\";\r\n\r\nconst INITIAL_MTL = new THREE.MeshPhongMaterial({\r\n    color: new THREE.Color(0xf1f1f1),\r\n    shininess: 10\r\n});\r\n\r\nconst INITIAL_MAP = [\r\n    {childID: \"back\", mtl: INITIAL_MTL},\r\n    {childID: \"base\", mtl: INITIAL_MTL},\r\n    {childID: \"cushions\", mtl: INITIAL_MTL},\r\n    {childID: \"legs\", mtl: INITIAL_MTL},\r\n    {childID: \"supports\", mtl: INITIAL_MTL}\r\n    ];\r\n\r\nconst initColor = (parent, type, mtl) => {\r\n    parent.traverse(o => {\r\n        if (o.isMesh && o.name.includes(type)) {\r\n            o.castShadow = true;\r\n            o.receiveShadow = true;\r\n            o.material = mtl;\r\n            o.nameID = type;\r\n        }\r\n    });\r\n}\r\n\r\nconst ChairMesh = ({newMaterialOpt}) => {\r\n    const {scene: theModel} = useLoader(GLTFLoader, \"chair.gltf\");\r\n    const chair = useRef(theModel)\r\n\r\n    useEffect(() =>\r\n            void setMaterial(newMaterialOpt.activeOption, newMaterialOpt.newMTL)\r\n        , [newMaterialOpt.newMTL])\r\n\r\n    useEffect(() => {\r\n        if (theModel) {\r\n            for (let object of INITIAL_MAP) {\r\n                initColor(theModel, object.childID, object.mtl);\r\n            }\r\n        }\r\n    }, [theModel])\r\n\r\n    const setMaterial = (type, mtl) => {\r\n        theModel.traverse(o => {\r\n            if (o.isMesh && o.nameID != null) {\r\n                if (o.nameID === type) {\r\n                    o.material = mtl;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    return <primitive\r\n        ref={chair}\r\n        object={theModel}\r\n        scale={[2, 2, 2]}\r\n        rotation={[0, Math.PI, 0]}\r\n        position={[0, -1, 0]}\r\n        receiveShadow\r\n        castShadow\r\n    >\r\n    </primitive>\r\n\r\n}\r\n\r\nexport default ChairMesh;\r\n"]},"metadata":{},"sourceType":"module"}